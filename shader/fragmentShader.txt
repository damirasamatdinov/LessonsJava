#version 400 core

varying vec2 pass_textureCoords;
varying vec3 surfaceNormal;
varying vec3 toLightVector;
varying vec3 toCameraVector;
varying float visibility;

out vec4 out_Color;

uniform sampler2D u_Texture;
uniform vec3 u_LightColour;
uniform float u_ShineDamper;
uniform float u_Reflectivity;
uniform vec3 u_SkyColor;

void main(){

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);
    vec3 unitCameraVector = normalize(toCameraVector);

    float nDotL = dot(unitNormal,unitLightVector);
    float brightness = max(nDotL,0.2);
    vec3 diffuse = brightness* u_LightColour;

    vec3 lightDirection = -unitLightVector;

    vec3 refectedLightDirection = reflect(lightDirection, unitNormal);

    float specularFactor = dot(refectedLightDirection,unitCameraVector);
    specularFactor = max(specularFactor,0.0);
    float dampedFactor = pow(specularFactor,u_ShineDamper);
    vec3 finalSpecular = dampedFactor * u_Reflectivity * u_LightColour;

    vec4 textureColor = texture(u_Texture,pass_textureCoords);
    if(textureColor.a < 0.5){
          discard;
    }



    out_Color = vec4(diffuse,1.0) * texture(u_Texture,pass_textureCoords)+ vec4(finalSpecular,  1.0);
    out_Color = mix(vec4(u_SkyColor,1.0), out_Color, visibility);
}