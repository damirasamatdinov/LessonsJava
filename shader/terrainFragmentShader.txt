#version 400 core

varying vec2 pass_textureCoords;
varying vec3 surfaceNormal;
varying vec3 toLightVector;
varying vec3 toCameraVector;
varying float visibility;

out vec4 out_Color;

uniform sampler2D u_TextureBackground;
uniform sampler2D u_TextureR;
uniform sampler2D u_TextureG;
uniform sampler2D u_TextureB;
uniform sampler2D u_TextureBlendMap;
uniform vec3 u_LightColour;
uniform float u_ShineDamper;
uniform float u_Reflectivity;
uniform vec3 u_SkyColor;

void main(){

    vec4 blendMapColour = texture(u_TextureBlendMap, pass_textureCoords);
    float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
    vec2 tiledCoords = pass_textureCoords * 40.0;
    vec4 backgroundTextureColor = texture(u_TextureBackground,tiledCoords) * backTextureAmount;
    vec4 RTextureColor = texture(u_TextureR, tiledCoords) * blendMapColour.r;
    vec4 GTextureColor = texture(u_TextureG, tiledCoords) * blendMapColour.g;
    vec4 BTextureColor = texture(u_TextureB, tiledCoords) * blendMapColour.b;

    vec4 totalColour = backgroundTextureColor+ RTextureColor + GTextureColor + BTextureColor;

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);
    vec3 unitCameraVector = normalize(toCameraVector);

    float nDotL = dot(unitNormal,unitLightVector);
    float brightness = max(nDotL,0.2);
    vec3 diffuse = brightness* u_LightColour;

    vec3 lightDirection = -unitLightVector;

    vec3 refectedLightDirection = reflect(lightDirection, unitNormal);

    float specularFactor = dot(refectedLightDirection,unitCameraVector);
    specularFactor = max(specularFactor,0.0);
    float dampedFactor = pow(specularFactor,u_ShineDamper);
    vec3 finalSpecular = dampedFactor * u_Reflectivity * u_LightColour;

    out_Color = vec4(diffuse,1.0) * totalColour + vec4(finalSpecular,  1.0);
    out_Color = mix(vec4(u_SkyColor,1.0), out_Color, visibility);
}